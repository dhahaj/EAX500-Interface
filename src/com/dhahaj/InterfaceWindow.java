/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dhahaj;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.io.*;
import java.net.*;
import java.util.logging.*;
import java.util.prefs.*;
import javax.swing.*;
import javax.swing.Timer;
import javax.swing.event.*;
import jssc.*;
import processing.core.*;
import say.swing.*;

import static com.dhahaj.Constants.INSTRUCTIONS_FILE;
import static com.dhahaj.Constants.RESOURCE_DIRECTORY;
import static com.dhahaj.Main.readFile;
import static processing.core.PApplet.println;

/**

 @author dmh
 */
public class InterfaceWindow extends JFrame implements Constants, ActionListener, InputMethodListener, KeyListener, VetoableChangeListener, ChangeListener, WindowFocusListener, FocusListener, PropertyChangeListener, MouseMotionListener, WindowListener {

    private ActionListener actionListener;
    private Preferences prefs;
    public String protocolVersion = null;
    /**
     The {@link Timer} that automatically logouts the user.
     */
    public final Timer LOGOUT_TIMER = new Timer(60000 * 1, null);

    public void setPrefs(Preferences p) {
        prefs = p;
    }

    /**
     Listener interface that logouts the user if no activity is detected for
     a certain period of time.
     */
    public static ActionListener logoutListener;

    /**
     Creates new form GUIFrame2
     */
    public InterfaceWindow() {
        setLookAndFeel();
        initComponents();

        //jOptionPane1 = new JOptionPane("test");
        //jOptionPane1.createDialog("title").setVisible(true);
        ImageIcon img = createImageIcon("rungui.png", getClass());
        setIconImage(img.getImage());

        exitMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK));
        testButton.setMnemonic('t');
        miManualControl.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, InputEvent.CTRL_MASK));
        pgmButton.setMnemonic('p');
        loginButton.setMnemonic('l');
        loginButton.requestFocusInWindow();
    }

    public void addPasswordDialogListener(ActionListener l) {
        actionListener = l;
    }

    /**
     This method is called from within the constructor to
     initialize the form.
     WARNING: Do NOT modify this code. The content of this method is
     always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        passwordDialog = new javax.swing.JDialog();
        jPanel11 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        adminCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        passwordField1 = new javax.swing.JPasswordField();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        removeUserDialog = new javax.swing.JDialog();
        // newUserDialog.setLocationRelativeTo(this);  
        //removeUserDialog.pack();
        centerDialog(removeUserDialog);
        //jComboBox1.removeAllItems();
        //int i = userComboBox.getItemCount();
        //for(int j=0;j<i;j++){
            //    jComboBox1.addItem(userComboBox.getItemAt(j));
            //}
        removeUserOKBtn = new javax.swing.JButton();
        cancelBtn1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jOptionPane1 = new javax.swing.JOptionPane();
        jPanel10 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        controlPane = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        pgmButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        jDeviceList = new javax.swing.JList<>();
        selectButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        slider = new javax.swing.JSlider();
        slideLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        btnBackgroundColor = new javax.swing.JButton();
        btnTextColor = new javax.swing.JButton();
        btnExit1 = new javax.swing.JButton();
        btnClearScreen1 = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        userComboBox = new javax.swing.JComboBox<>();
        deviceLabel = new javax.swing.JLabel();
        comErrorLabel = new javax.swing.JLabel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        changeFontMenuItem = new javax.swing.JMenuItem();
        miEditConfig = new javax.swing.JMenuItem();
        exploreMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        miAutotest = new javax.swing.JCheckBoxMenuItem();
        adminMenu = new javax.swing.JMenu();
        miSetCOMPort = new javax.swing.JMenuItem();
        connectMenuItem = new javax.swing.JMenuItem();
        miManualControl = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miAddUser = new javax.swing.JMenuItem();
        miRemoveUser = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        eax300menuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        miUsageVideo = new javax.swing.JMenuItem();
        miPortErrorVideo = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        aboutMenuItem = new javax.swing.JMenuItem();

        passwordDialog.setTitle("Login");
        passwordDialog.setAlwaysOnTop(true);
        passwordDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        passwordDialog.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        passwordDialog.setMinimumSize(new java.awt.Dimension(338, 145));
        passwordDialog.setModal(true);
        passwordDialog.setResizable(false);
        passwordDialog.setSize(new java.awt.Dimension(288, 109));
        passwordDialog.setType(java.awt.Window.Type.POPUP);
        passwordDialog.addWindowFocusListener(this);
        passwordDialog.addWindowListener(this);

        jPanel11.setMaximumSize(new java.awt.Dimension(288, 116));
        jPanel11.setMinimumSize(new java.awt.Dimension(288, 116));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Enter Password:");

        passwordField.addFocusListener(this);
        passwordField.addActionListener(this);
        passwordField.addKeyListener(this);

        cancelButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this);

        okButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        okButton.setText("OK");
        okButton.addActionListener(this);

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(passwordField)
                .add(10, 10, 10))
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(okButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(1, 1, 1))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(passwordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(okButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout passwordDialogLayout = new org.jdesktop.layout.GroupLayout(passwordDialog.getContentPane());
        passwordDialog.getContentPane().setLayout(passwordDialogLayout);
        passwordDialogLayout.setHorizontalGroup(
            passwordDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        passwordDialogLayout.setVerticalGroup(
            passwordDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(passwordDialogLayout.createSequentialGroup()
                .add(jPanel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newUserDialog.setTitle("Add User");
        newUserDialog.setAlwaysOnTop(true);
        newUserDialog.setMinimumSize(new java.awt.Dimension(335, 200));
        newUserDialog.setModal(true);
        newUserDialog.setResizable(false);
        newUserDialog.setSize(new java.awt.Dimension(335, 240));
        newUserDialog.addFocusListener(this);
        newUserDialog.addWindowListener(this);

        adminCheckBox.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        adminCheckBox.setText("Admin");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        jLabel3.setLabelFor(passwordField1);
        jLabel3.setText("Password");

        userTextField.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        userTextField.addActionListener(this);

        passwordField1.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        passwordField1.addActionListener(this);

        okBtn.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        okBtn.setText("OK");
        okBtn.setMaximumSize(new java.awt.Dimension(90, 35));
        okBtn.setMinimumSize(new java.awt.Dimension(90, 35));
        okBtn.setPreferredSize(new java.awt.Dimension(90, 35));

        cancelBtn.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        cancelBtn.setText("Cancel");
        cancelBtn.setMaximumSize(new java.awt.Dimension(90, 35));
        cancelBtn.setMinimumSize(new java.awt.Dimension(90, 35));
        cancelBtn.setPreferredSize(new java.awt.Dimension(90, 35));
        cancelBtn.addActionListener(this);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        jLabel4.setLabelFor(userTextField);
        jLabel4.setText("Username");

        org.jdesktop.layout.GroupLayout newUserDialogLayout = new org.jdesktop.layout.GroupLayout(newUserDialog.getContentPane());
        newUserDialog.getContentPane().setLayout(newUserDialogLayout);
        newUserDialogLayout.setHorizontalGroup(
            newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(newUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, newUserDialogLayout.createSequentialGroup()
                        .add(newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(newUserDialogLayout.createSequentialGroup()
                                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, newUserDialogLayout.createSequentialGroup()
                                .add(3, 3, 3)
                                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .add(newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(adminCheckBox)
                            .add(userTextField)
                            .add(passwordField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, newUserDialogLayout.createSequentialGroup()
                        .add(cancelBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(okBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newUserDialogLayout.setVerticalGroup(
            newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(newUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(userTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(passwordField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(adminCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(newUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cancelBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(okBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        newUserDialog.getAccessibleContext().setAccessibleParent(null);

        removeUserDialog.setTitle("Remove User");
        removeUserDialog.setAlwaysOnTop(true);
        removeUserDialog.setIconImage(getIconImage());
        removeUserDialog.setMinimumSize(new java.awt.Dimension(335, 200));
        removeUserDialog.setModal(true);
        removeUserDialog.setResizable(false);
        removeUserDialog.setSize(new java.awt.Dimension(380, 210));
        removeUserDialog.addWindowListener(this);

        removeUserOKBtn.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        removeUserOKBtn.setText("OK");
        removeUserOKBtn.setMaximumSize(new java.awt.Dimension(90, 35));
        removeUserOKBtn.setMinimumSize(new java.awt.Dimension(90, 35));
        removeUserOKBtn.setPreferredSize(new java.awt.Dimension(90, 35));

        cancelBtn1.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        cancelBtn1.setText("Cancel");
        cancelBtn1.setMaximumSize(new java.awt.Dimension(90, 35));
        cancelBtn1.setMinimumSize(new java.awt.Dimension(90, 35));
        cancelBtn1.setPreferredSize(new java.awt.Dimension(90, 35));
        cancelBtn1.addActionListener(this);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel7.setLabelFor(userTextField);
        jLabel7.setText("Select User");

        jComboBox1.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N

        org.jdesktop.layout.GroupLayout removeUserDialogLayout = new org.jdesktop.layout.GroupLayout(removeUserDialog.getContentPane());
        removeUserDialog.getContentPane().setLayout(removeUserDialogLayout);
        removeUserDialogLayout.setHorizontalGroup(
            removeUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(removeUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(removeUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(removeUserDialogLayout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(removeUserDialogLayout.createSequentialGroup()
                        .add(cancelBtn1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(removeUserOKBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        removeUserDialogLayout.setVerticalGroup(
            removeUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(removeUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(removeUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(removeUserDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(removeUserOKBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cancelBtn1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jOptionPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jOptionPane1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon32.png"))); // NOI18N
        jOptionPane1.setInputValue("username");
        jOptionPane1.setMessage(jOptionPane1.getValue());
        jOptionPane1.setMessageType(0);
        jOptionPane1.setValue(jOptionPane1.getValue());
        jOptionPane1.setWantsInput(true);
        jOptionPane1.setPreferredSize(new java.awt.Dimension(365, 110));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${font}"), jOptionPane1, org.jdesktop.beansbinding.BeanProperty.create("font"));
        bindingGroup.addBinding(binding);

        jOptionPane1.getAccessibleContext().setAccessibleParent(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("EAX500 Testing Interface");
        setBounds(new java.awt.Rectangle(0, 0, 500, 500));
        setIconImage(getIconImage());
        setIconImages(getIconImages());
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(600, 700));
        setSize(new java.awt.Dimension(500, 600));
        addMouseMotionListener(this);
        addWindowListener(this);

        jPanel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel10.setFocusCycleRoot(true);
        jPanel10.setFocusTraversalPolicyProvider(true);
        jPanel10.setNextFocusableComponent(jSplitPane2);

        jSplitPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSplitPane2.setDividerLocation(550);
        jSplitPane2.setDividerSize(15);
        jSplitPane2.setForeground(java.awt.SystemColor.scrollbar);
        jSplitPane2.setResizeWeight(0.5);
        jSplitPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPane2.setMinimumSize(new java.awt.Dimension(17, 160));
        jSplitPane2.setNextFocusableComponent(leftPanel);
        jSplitPane2.setPreferredSize(new java.awt.Dimension(1108, 260));
        jSplitPane2.setRequestFocusEnabled(false);
        jSplitPane2.addMouseMotionListener(this);
        jSplitPane2.addPropertyChangeListener(this);

        leftPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        leftPanel.setMinimumSize(new java.awt.Dimension(500, 400));
        leftPanel.setNextFocusableComponent(rightPanel);
        leftPanel.setPreferredSize(new java.awt.Dimension(500, 220));

        controlPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        controlPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        controlPane.setToolTipText("Display a device to select");
        controlPane.setFocusCycleRoot(true);
        controlPane.setFont(new java.awt.Font("Dialog", 0, 22)); // NOI18N
        controlPane.setMinimumSize(new java.awt.Dimension(200, 150));
        controlPane.setPreferredSize(new java.awt.Dimension(581, 220));
        controlPane.setRequestFocusEnabled(false);
        controlPane.addMouseMotionListener(this);

        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel6.setPreferredSize(new java.awt.Dimension(321, 200));
        jPanel6.setRequestFocusEnabled(false);

        testButton.setFont(testButton.getFont().deriveFont(testButton.getFont().getStyle() | java.awt.Font.BOLD, testButton.getFont().getSize()+14));
        testButton.setText("Test");
        testButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));
        testButton.setFocusCycleRoot(true);
        testButton.setMinimumSize(new java.awt.Dimension(50, 30));
        testButton.setNextFocusableComponent(pgmButton);
        testButton.setPreferredSize(new java.awt.Dimension(130, 45));
        testButton.setRequestFocusEnabled(false);
        testButton.addActionListener(this);

        pgmButton.setFont(pgmButton.getFont().deriveFont(pgmButton.getFont().getStyle() | java.awt.Font.BOLD, pgmButton.getFont().getSize()+14));
        pgmButton.setText("Program");
        pgmButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));
        pgmButton.setFocusCycleRoot(true);
        pgmButton.setMinimumSize(new java.awt.Dimension(50, 47));
        pgmButton.setNextFocusableComponent(testButton);
        pgmButton.setPreferredSize(new java.awt.Dimension(130, 47));
        pgmButton.setRequestFocusEnabled(false);
        pgmButton.addActionListener(this);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pgmButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, testButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(pgmButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(testButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        controlPane.addTab("Controls", jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel7.setRequestFocusEnabled(false);

        jScrollPane.setDoubleBuffered(true);
        jScrollPane.setFocusCycleRoot(true);
        jScrollPane.setFocusTraversalPolicyProvider(true);
        jScrollPane.setMinimumSize(new java.awt.Dimension(25, 39));

        jDeviceList.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jDeviceList.setFont(jDeviceList.getFont().deriveFont(jDeviceList.getFont().getSize()+12f));
        jDeviceList.setModel(new javax.swing.AbstractListModel<String>() {

            String[] strings = {"EAX500", "EAX503", "EAX504", "EAX505", "EAX510", "EAX513",
                "EAX514", "EAX515", "EAX520", "EAX523", "EAX524", "EAX525"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }

        });
        jDeviceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jDeviceList.setToolTipText("Select a device");
        jDeviceList.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jDeviceList.setFocusCycleRoot(true);
        jDeviceList.setMinimumSize(new java.awt.Dimension(55, 20));
        jDeviceList.setNextFocusableComponent(controlPane);
        jDeviceList.setRequestFocusEnabled(false);
        jDeviceList.setSelectedIndex(0);
        jDeviceList.setValueIsAdjusting(true);
        jDeviceList.addKeyListener(this);
        jScrollPane.setViewportView(jDeviceList);

        selectButton.setFont(selectButton.getFont().deriveFont(selectButton.getFont().getSize()+12f));
        selectButton.setText("Select");
        selectButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        selectButton.setBorderPainted(false);
        selectButton.setFocusCycleRoot(true);
        selectButton.setMinimumSize(new java.awt.Dimension(60, 37));
        selectButton.setNextFocusableComponent(jDeviceList);
        selectButton.setPreferredSize(new java.awt.Dimension(80, 37));
        selectButton.addActionListener(this);

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(6, 6, 6))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .add(selectButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(10, 10, 10))
        );

        controlPane.addTab("Select Device", jPanel7);

        jPanel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel8.setRequestFocusEnabled(false);

        slider.setFont(slider.getFont().deriveFont(slider.getFont().getSize()+10f));
        slider.setMajorTickSpacing(20);
        slider.setMinorTickSpacing(4);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setSnapToTicks(true);
        slider.setFocusCycleRoot(true);
        slider.addChangeListener(this);
        slider.addInputMethodListener(this);
        slider.addVetoableChangeListener(this);

        slideLabel.setFont(slideLabel.getFont().deriveFont(slideLabel.getFont().getSize()+12f));
        slideLabel.setText("50%");

        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()+12f));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Test Speed: ");
        jLabel5.setFocusable(false);
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel5.setIconTextGap(0);
        jLabel5.setRequestFocusEnabled(false);

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 169, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(slideLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel8Layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(slider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(slider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(slideLabel))
                .add(30, 30, 30))
        );

        controlPane.addTab("Testing Speed", jPanel8);

        jPanel9.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel9.setRequestFocusEnabled(false);

        btnBackgroundColor.setFont(btnBackgroundColor.getFont().deriveFont(btnBackgroundColor.getFont().getSize()+12f));
        btnBackgroundColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/colors2.png"))); // NOI18N
        btnBackgroundColor.setText("Background Color Selection");
        btnBackgroundColor.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnBackgroundColor.setIconTextGap(35);
        btnBackgroundColor.setMinimumSize(new java.awt.Dimension(150, 33));
        btnBackgroundColor.setRequestFocusEnabled(false);
        btnBackgroundColor.addActionListener(this);

        btnTextColor.setFont(btnTextColor.getFont().deriveFont(btnTextColor.getFont().getSize()+12f));
        btnTextColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/colors2.png"))); // NOI18N
        btnTextColor.setText("Text Color Selection");
        btnTextColor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnTextColor.setIconTextGap(80);
        btnTextColor.setMinimumSize(new java.awt.Dimension(150, 33));
        btnTextColor.setRequestFocusEnabled(false);
        btnTextColor.addActionListener(this);

        btnExit1.setFont(btnExit1.getFont().deriveFont(btnExit1.getFont().getSize()+12f));
        btnExit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        btnExit1.setText("Quit");
        btnExit1.setIconTextGap(15);
        btnExit1.setMinimumSize(new java.awt.Dimension(21, 31));
        btnExit1.setRequestFocusEnabled(false);
        btnExit1.addActionListener(this);

        btnClearScreen1.setFont(btnClearScreen1.getFont().deriveFont(btnClearScreen1.getFont().getSize()+10f));
        btnClearScreen1.setText("Clear Screen");
        btnClearScreen1.setMinimumSize(new java.awt.Dimension(35, 31));
        btnClearScreen1.setRequestFocusEnabled(false);
        btnClearScreen1.addActionListener(this);

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel9Layout.createSequentialGroup()
                        .add(btnClearScreen1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 188, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnExit1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btnTextColor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btnBackgroundColor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(btnBackgroundColor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnTextColor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnClearScreen1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnExit1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(16, 16, 16))
        );

        controlPane.addTab("Settings", new javax.swing.ImageIcon(getClass().getResource("/images/settings1.png")), jPanel9); // NOI18N

        controlPane.setSelectedIndex(1);

        org.jdesktop.layout.GroupLayout leftPanelLayout = new org.jdesktop.layout.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(leftPanelLayout.createSequentialGroup()
                .add(controlPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(controlPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
        );

        jSplitPane2.setLeftComponent(leftPanel);

        rightPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        rightPanel.setDoubleBuffered(false);
        rightPanel.setFocusable(false);
        rightPanel.setNextFocusableComponent(loginButton);
        rightPanel.setPreferredSize(new java.awt.Dimension(447, 200));
        rightPanel.setRequestFocusEnabled(false);

        loginButton.setFont(loginButton.getFont().deriveFont(loginButton.getFont().getStyle() | java.awt.Font.BOLD, loginButton.getFont().getSize()+13));
        loginButton.setMnemonic('l');
        loginButton.setText("Login");
        loginButton.setToolTipText("Click to login");
        loginButton.setNextFocusableComponent(userComboBox);
        loginButton.setRequestFocusEnabled(false);
        loginButton.setSelected(true);
        loginButton.addActionListener(this);

        userLabel.setFont(userLabel.getFont().deriveFont(userLabel.getFont().getStyle() | java.awt.Font.BOLD, userLabel.getFont().getSize()+15));
        userLabel.setForeground(java.awt.Color.red);
        userLabel.setText("Not Logged In");
        userLabel.setAlignmentX(0.5F);
        userLabel.setBorder(null);
        userLabel.setFocusable(false);
        userLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        userLabel.setIconTextGap(6);
        userLabel.setMaximumSize(new java.awt.Dimension(253, 35));
        userLabel.setMinimumSize(new java.awt.Dimension(253, 35));
        userLabel.setPreferredSize(new java.awt.Dimension(222, 34));
        userLabel.setRequestFocusEnabled(false);

        userComboBox.setFont(userComboBox.getFont().deriveFont(userComboBox.getFont().getStyle() & ~java.awt.Font.BOLD, userComboBox.getFont().getSize()+12));
        userComboBox.setMaximumRowCount(12);
        userComboBox.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        userComboBox.setNextFocusableComponent(loginButton);
        userComboBox.addKeyListener(this);

        deviceLabel.setFont(deviceLabel.getFont().deriveFont(deviceLabel.getFont().getStyle() | java.awt.Font.BOLD, deviceLabel.getFont().getSize()+15));
        deviceLabel.setForeground(java.awt.Color.red);
        deviceLabel.setText("No Device Selected");
        deviceLabel.setAlignmentX(0.5F);
        deviceLabel.setBorder(null);
        deviceLabel.setFocusable(false);
        deviceLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        deviceLabel.setIconTextGap(6);
        deviceLabel.setMinimumSize(new java.awt.Dimension(300, 35));
        deviceLabel.setRequestFocusEnabled(false);

        comErrorLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        comErrorLabel.setForeground(new java.awt.Color(204, 0, 0));
        comErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comErrorLabel.setText("Tester Not Connected");
        comErrorLabel.setFocusable(false);
        comErrorLabel.setVisible(false);

        org.jdesktop.layout.GroupLayout rightPanelLayout = new org.jdesktop.layout.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(rightPanelLayout.createSequentialGroup()
                        .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(deviceLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                            .add(userLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, loginButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, userComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, rightPanelLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(comErrorLabel)))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(rightPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(loginButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deviceLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(userComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(userLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(comErrorLabel)
                .add(4, 4, 4))
        );

        jSplitPane2.setRightComponent(rightPanel);

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1112, Short.MAX_VALUE)
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel10Layout.createSequentialGroup()
                    .add(jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 272, Short.MAX_VALUE)
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
        );

        jDesktopPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jDesktopPane1.setRequestFocusEnabled(false);

        jPanel1.setFocusable(false);
        jPanel1.setRequestFocusEnabled(false);

        jScrollPane1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 300));
        jScrollPane1.setRequestFocusEnabled(false);

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("sansserif", 0, 20)); // NOI18N
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setAutoscrolls(false);
        textArea.setFocusable(false);
        textArea.setMinimumSize(new java.awt.Dimension(0, 0));
        textArea.setNextFocusableComponent(pgmButton);
        textArea.setRequestFocusEnabled(false);
        textArea.addMouseMotionListener(this);
        jScrollPane1.setViewportView(textArea);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDesktopPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout jDesktopPane1Layout = new org.jdesktop.layout.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuBar1.setDoubleBuffered(true);
        jMenuBar1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jMenuBar1.setOpaque(true);

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");
        jMenu1.setFont(jMenu1.getFont().deriveFont(jMenu1.getFont().getSize()+8f));
        jMenu1.setIconTextGap(2);
        jMenu1.setMargin(new java.awt.Insets(2, 4, 2, 4));

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setFont(exitMenuItem.getFont().deriveFont(exitMenuItem.getFont().getSize()+8f));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.setHideActionText(true);
        exitMenuItem.setIconTextGap(10);
        exitMenuItem.setMargin(new java.awt.Insets(4, 4, 4, 4));
        exitMenuItem.setMaximumSize(new java.awt.Dimension(285, 41));
        exitMenuItem.setMinimumSize(new java.awt.Dimension(285, 41));
        exitMenuItem.setNextFocusableComponent(userComboBox);
        exitMenuItem.setPreferredSize(new java.awt.Dimension(200, 41));
        exitMenuItem.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        exitMenuItem.addActionListener(this);
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('o');
        jMenu2.setText("Options");
        jMenu2.setFont(jMenu2.getFont().deriveFont(jMenu2.getFont().getSize()+8f));
        jMenu2.setIconTextGap(2);
        jMenu2.setMargin(new java.awt.Insets(2, 6, 2, 4));

        changeFontMenuItem.setFont(changeFontMenuItem.getFont().deriveFont(changeFontMenuItem.getFont().getSize()+10f));
        changeFontMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/set.png"))); // NOI18N
        changeFontMenuItem.setMnemonic('c');
        changeFontMenuItem.setText("Change Font");
        changeFontMenuItem.setIconTextGap(10);
        changeFontMenuItem.setMargin(new java.awt.Insets(4, 4, 4, 4));
        changeFontMenuItem.setPreferredSize(new java.awt.Dimension(320, 41));
        changeFontMenuItem.addActionListener(this);
        jMenu2.add(changeFontMenuItem);

        miEditConfig.setFont(miEditConfig.getFont().deriveFont(miEditConfig.getFont().getSize()+10f));
        miEditConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/settings1.png"))); // NOI18N
        miEditConfig.setMnemonic('o');
        miEditConfig.setText("Open Device Manager");
        miEditConfig.setHideActionText(true);
        miEditConfig.setIconTextGap(10);
        miEditConfig.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miEditConfig.setPreferredSize(new java.awt.Dimension(320, 41));
        miEditConfig.addActionListener(this);
        jMenu2.add(miEditConfig);

        exploreMenuItem.setFont(exploreMenuItem.getFont().deriveFont(exploreMenuItem.getFont().getSize()+10f));
        exploreMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder open.png"))); // NOI18N
        exploreMenuItem.setMnemonic('x');
        exploreMenuItem.setText("Explore Directory");
        exploreMenuItem.setHideActionText(true);
        exploreMenuItem.setIconTextGap(10);
        exploreMenuItem.setMargin(new java.awt.Insets(4, 4, 4, 4));
        exploreMenuItem.setPreferredSize(new java.awt.Dimension(320, 41));
        exploreMenuItem.addActionListener(this);
        jMenu2.add(exploreMenuItem);
        jMenu2.add(jSeparator3);

        miAutotest.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        miAutotest.setMnemonic('e');
        miAutotest.setSelected(true);
        miAutotest.setText("Enable AutoTesing");
        miAutotest.setToolTipText("automatically runs a test if programming is succesful");
        miAutotest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/get.png"))); // NOI18N
        miAutotest.setIconTextGap(10);
        miAutotest.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miAutotest.setPreferredSize(new java.awt.Dimension(320, 41));
        miAutotest.addActionListener(this);
        jMenu2.add(miAutotest);

        jMenuBar1.add(jMenu2);

        adminMenu.setMnemonic('a');
        adminMenu.setText("Admin");
        adminMenu.setDoubleBuffered(true);
        adminMenu.setEnabled(false);
        adminMenu.setFont(adminMenu.getFont().deriveFont(adminMenu.getFont().getSize()+8f));
        adminMenu.setMargin(new java.awt.Insets(0, 8, 0, 8));

        miSetCOMPort.setFont(miSetCOMPort.getFont().deriveFont(miSetCOMPort.getFont().getSize()+10f));
        miSetCOMPort.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/connect3.png"))); // NOI18N
        miSetCOMPort.setMnemonic('s');
        miSetCOMPort.setText("Set COM Port");
        miSetCOMPort.setIconTextGap(10);
        miSetCOMPort.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miSetCOMPort.setPreferredSize(new java.awt.Dimension(320, 41));
        miSetCOMPort.addActionListener(this);
        adminMenu.add(miSetCOMPort);

        connectMenuItem.setFont(connectMenuItem.getFont().deriveFont(connectMenuItem.getFont().getSize()+10f));
        connectMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        connectMenuItem.setMnemonic('c');
        connectMenuItem.setText("Connect Tester");
        connectMenuItem.setIconTextGap(10);
        connectMenuItem.setMargin(new java.awt.Insets(4, 4, 4, 4));
        connectMenuItem.setPreferredSize(new java.awt.Dimension(320, 41));
        adminMenu.add(connectMenuItem);

        miManualControl.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        miManualControl.setFont(miManualControl.getFont().deriveFont(miManualControl.getFont().getSize()+10f));
        miManualControl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wizard.png"))); // NOI18N
        miManualControl.setMnemonic('m');
        miManualControl.setText("Manual Control");
        miManualControl.setIconTextGap(10);
        miManualControl.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miManualControl.setPreferredSize(new java.awt.Dimension(320, 41));
        adminMenu.add(miManualControl);
        adminMenu.add(jSeparator1);

        miAddUser.setFont(miAddUser.getFont().deriveFont(miAddUser.getFont().getSize()+10f));
        miAddUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add_small@2x.png"))); // NOI18N
        miAddUser.setMnemonic('a');
        miAddUser.setText("Add User");
        miAddUser.setHideActionText(true);
        miAddUser.setIconTextGap(10);
        miAddUser.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miAddUser.setPreferredSize(new java.awt.Dimension(320, 41));
        miAddUser.addActionListener(this);
        adminMenu.add(miAddUser);

        miRemoveUser.setFont(miRemoveUser.getFont().deriveFont(miRemoveUser.getFont().getSize()+10f));
        miRemoveUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove.png"))); // NOI18N
        miRemoveUser.setMnemonic('r');
        miRemoveUser.setText("Remove User");
        miRemoveUser.setHideActionText(true);
        miRemoveUser.setIconTextGap(10);
        miRemoveUser.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miRemoveUser.setPreferredSize(new java.awt.Dimension(320, 41));
        miRemoveUser.addActionListener(this);
        adminMenu.add(miRemoveUser);
        adminMenu.add(jSeparator5);

        eax300menuItem.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        eax300menuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/upload.png"))); // NOI18N
        eax300menuItem.setMnemonic('p');
        eax300menuItem.setText("Program EAX300");
        eax300menuItem.setIconTextGap(10);
        eax300menuItem.setMargin(new java.awt.Insets(4, 4, 4, 4));
        eax300menuItem.setPreferredSize(new java.awt.Dimension(320, 41));
        adminMenu.add(eax300menuItem);

        jMenuBar1.add(adminMenu);

        jMenu3.setMnemonic('h');
        jMenu3.setText("Help");
        jMenu3.setFont(jMenu3.getFont().deriveFont(jMenu3.getFont().getSize()+8f));
        jMenu3.setMargin(new java.awt.Insets(0, 8, 0, 8));

        miUsageVideo.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        miUsageVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        miUsageVideo.setMnemonic('a');
        miUsageVideo.setText("Basic Usage Help");
        miUsageVideo.setIconTextGap(10);
        miUsageVideo.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miUsageVideo.setPreferredSize(new java.awt.Dimension(300, 41));
        miUsageVideo.addActionListener(this);
        jMenu3.add(miUsageVideo);

        miPortErrorVideo.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        miPortErrorVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        miPortErrorVideo.setMnemonic('a');
        miPortErrorVideo.setText("Port Error Help");
        miPortErrorVideo.setIconTextGap(10);
        miPortErrorVideo.setMargin(new java.awt.Insets(4, 4, 4, 4));
        miPortErrorVideo.setPreferredSize(new java.awt.Dimension(300, 41));
        miPortErrorVideo.addActionListener(this);
        jMenu3.add(miPortErrorVideo);
        jMenu3.add(jSeparator4);

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aboutMenuItem.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information.png"))); // NOI18N
        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.setIconTextGap(10);
        aboutMenuItem.setMargin(new java.awt.Insets(4, 4, 4, 4));
        aboutMenuItem.setPreferredSize(new java.awt.Dimension(300, 41));
        aboutMenuItem.addActionListener(this);
        jMenu3.add(aboutMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jDesktopPane1)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jDesktopPane1)
                .add(281, 281, 281))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(309, Short.MAX_VALUE)
                    .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        bindingGroup.bind();

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == testButton) {
            InterfaceWindow.this.testButtonActionPerformed(evt);
        }
        else if (evt.getSource() == pgmButton) {
            InterfaceWindow.this.pgmButtonActionPerformed(evt);
        }
        else if (evt.getSource() == selectButton) {
            InterfaceWindow.this.selectButtonsetDeviceActionPerformed(evt);
        }
        else if (evt.getSource() == btnBackgroundColor) {
            InterfaceWindow.this.btnBackgroundColorActionPerformed(evt);
        }
        else if (evt.getSource() == btnTextColor) {
            InterfaceWindow.this.btnTextColorActionPerformed(evt);
        }
        else if (evt.getSource() == btnExit1) {
            InterfaceWindow.this.btnExit1ActionPerformed(evt);
        }
        else if (evt.getSource() == btnClearScreen1) {
            InterfaceWindow.this.btnClearScreen1ActionPerformed(evt);
        }
        else if (evt.getSource() == loginButton) {
            InterfaceWindow.this.loginButtonActionPerformed(evt);
        }
        else if (evt.getSource() == passwordField) {
            InterfaceWindow.this.passwordFieldActionPerformed(evt);
        }
        else if (evt.getSource() == cancelButton) {
            InterfaceWindow.this.cancelButtonActionPerformed(evt);
        }
        else if (evt.getSource() == okButton) {
            InterfaceWindow.this.okButtonActionPerformed(evt);
        }
        else if (evt.getSource() == userTextField) {
            InterfaceWindow.this.userTextFieldActionPerformed(evt);
        }
        else if (evt.getSource() == passwordField1) {
            InterfaceWindow.this.passwordField1ActionPerformed(evt);
        }
        else if (evt.getSource() == cancelBtn) {
            InterfaceWindow.this.cancelBtnActionPerformed(evt);
        }
        else if (evt.getSource() == cancelBtn1) {
            InterfaceWindow.this.cancelBtn1ActionPerformed(evt);
        }
        else if (evt.getSource() == exitMenuItem) {
            InterfaceWindow.this.exitMenuItemActionPerformed(evt);
        }
        else if (evt.getSource() == changeFontMenuItem) {
            InterfaceWindow.this.changeFontMenuItemActionPerformed(evt);
        }
        else if (evt.getSource() == miEditConfig) {
            InterfaceWindow.this.miEditConfigActionPerformed(evt);
        }
        else if (evt.getSource() == exploreMenuItem) {
            InterfaceWindow.this.exploreMenuItemActionPerformed(evt);
        }
        else if (evt.getSource() == miAutotest) {
            InterfaceWindow.this.miAutotestActionPerformed(evt);
        }
        else if (evt.getSource() == miSetCOMPort) {
            InterfaceWindow.this.miSetCOMPortActionPerformed(evt);
        }
        else if (evt.getSource() == miAddUser) {
            InterfaceWindow.this.miAddUserActionPerformed(evt);
        }
        else if (evt.getSource() == miRemoveUser) {
            InterfaceWindow.this.miRemoveUserActionPerformed(evt);
        }
        else if (evt.getSource() == miUsageVideo) {
            InterfaceWindow.this.miUsageVideoActionPerformed(evt);
        }
        else if (evt.getSource() == miPortErrorVideo) {
            InterfaceWindow.this.miPortErrorVideoActionPerformed(evt);
        }
        else if (evt.getSource() == aboutMenuItem) {
            InterfaceWindow.this.aboutMenuItemActionPerformed(evt);
        }
    }

    public void focusGained(java.awt.event.FocusEvent evt) {
    }

    public void focusLost(java.awt.event.FocusEvent evt) {
        if (evt.getSource() == passwordField) {
            InterfaceWindow.this.passwordFieldFocusLost(evt);
        }
        else if (evt.getSource() == newUserDialog) {
            InterfaceWindow.this.newUserDialogFocusLost(evt);
        }
    }

    public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
        if (evt.getSource() == slider) {
            InterfaceWindow.this.sliderEvent(evt);
        }
    }

    public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
    }

    public void keyPressed(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == jDeviceList) {
            InterfaceWindow.this.jDeviceListKeyPressed(evt);
        }
        else if (evt.getSource() == userComboBox) {
            InterfaceWindow.this.userComboBoxKeyPressed(evt);
        }
    }

    public void keyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == passwordField) {
            InterfaceWindow.this.passwordFieldKeyReleased(evt);
        }
    }

    public void keyTyped(java.awt.event.KeyEvent evt) {
    }

    public void mouseDragged(java.awt.event.MouseEvent evt) {
    }

    public void mouseMoved(java.awt.event.MouseEvent evt) {
        if (evt.getSource() == InterfaceWindow.this) {
            InterfaceWindow.this.formMouseMoved(evt);
        }
        else if (evt.getSource() == jSplitPane2) {
            InterfaceWindow.this.jSplitPane2MouseMoved(evt);
        }
        else if (evt.getSource() == controlPane) {
            InterfaceWindow.this.controlPaneMouseMoved(evt);
        }
        else if (evt.getSource() == textArea) {
            InterfaceWindow.this.textAreaMouseMoved(evt);
        }
    }

    public void windowGainedFocus(java.awt.event.WindowEvent evt) {
    }

    public void windowLostFocus(java.awt.event.WindowEvent evt) {
        if (evt.getSource() == passwordDialog) {
            InterfaceWindow.this.passwordDialogWindowLostFocus(evt);
        }
    }

    public void windowActivated(java.awt.event.WindowEvent evt) {
    }

    public void windowClosed(java.awt.event.WindowEvent evt) {
        if (evt.getSource() == passwordDialog) {
            InterfaceWindow.this.passwordDialogWindowClosed(evt);
        }
    }

    public void windowClosing(java.awt.event.WindowEvent evt) {
        if (evt.getSource() == newUserDialog) {
            InterfaceWindow.this.newUserDialogWindowClosing(evt);
        }
    }

    public void windowDeactivated(java.awt.event.WindowEvent evt) {
    }

    public void windowDeiconified(java.awt.event.WindowEvent evt) {
    }

    public void windowIconified(java.awt.event.WindowEvent evt) {
    }

    public void windowOpened(java.awt.event.WindowEvent evt) {
        if (evt.getSource() == InterfaceWindow.this) {
            InterfaceWindow.this.formWindowOpened(evt);
        }
        else if (evt.getSource() == removeUserDialog) {
            InterfaceWindow.this.removeUserDialogWindowOpened(evt);
        }
    }

    public void propertyChange(java.beans.PropertyChangeEvent evt) {
        if (evt.getSource() == jSplitPane2) {
            InterfaceWindow.this.jSplitPane2PropertyChange(evt);
        }
    }

    public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
        if (evt.getSource() == slider) {
            InterfaceWindow.this.sliderVetoableChange(evt);
        }
    }

    public void stateChanged(javax.swing.event.ChangeEvent evt) {
        if (evt.getSource() == slider) {
            InterfaceWindow.this.sliderStateChanged(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void changeFontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFontMenuItemActionPerformed
        JFontChooser chooser = new JFontChooser();
        Font oldFont = textArea.getFont();
        chooser.setSelectedFont(oldFont);
        int action = chooser.showDialog(this);
        if (action == JFontChooser.OK_OPTION) {
            Font newFont = chooser.getSelectedFont();
            textArea.setFont(newFont);
            prefs.put(FONT_NAME_PREF, newFont.getFamily());
            prefs.putInt(FONT_STYLE_PREF, newFont.getStyle());
            prefs.putInt(FONT_SIZE_PREF, newFont.getSize());
        }
        //        JFontChooser chooser = new JFontChooser();
        //        Font oldFont = textArea.getFont();
        //        chooser.setSelectedFont(oldFont);
        //        int action = chooser.showDialog(this);
        //        if (action == JFontChooser.OK_OPTION) {
        //            Font newFont = chooser.getSelectedFont();
        //            textArea.setFont(newFont);
        ////            savePreference("FontName", newFont.getName());
        ////            savePreference("FontStyle", newFont.getStyle());
        ////            savePreference("FontSize", newFont.getSize());
        //        }
    }//GEN-LAST:event_changeFontMenuItemActionPerformed

    private void miEditConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditConfigActionPerformed
        try {
            String[] cmd = {"cmd", "/c", "devmgmt.msc"};
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ex) {
//            debug(ex);
//            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miEditConfigActionPerformed

    private void miAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddUserActionPerformed

        //    java.awt.EventQueue.invokeLater(() -> {
        //      NewUserDialog.showDialog(null, (User u) -> {
        //        //println(u);
        //        //this.invalidate();
        //        println(controlPane);
        //        println(leftPanel);
        //      });
        //    });
//        Helpers.centerDialog(newUserDialog);
//        newUserDialog.setVisible(true);
        /*
        Map<String, String> map = User.users; Object[] options =
        map.entrySet().toArray(); int i = JOptionPane.showOptionDialog(this,
            "Select User", "Remove User", JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.INFORMATION_MESSAGE, null, options, options[0]); if (i ==
            JOptionPane.OK_OPTION) { map.remove(options[i]); User.setUsers(map);
        }
         */
        //    if (map.containsKey(oldUser)) {
        //
        //    }
    }//GEN-LAST:event_miAddUserActionPerformed

    private void miRemoveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRemoveUserActionPerformed
//        JComboBox comboBox = new JComboBox(userXML.getUserNames().toArray(new String[userXML.getList().size()]));
//        JPanel jp = new JPanel(new GridLayout(2, 2));
//        jp.add(comboBox);
        // jp.add(new JButton("OK"));
//        int action = JOptionPane.showConfirmDialog(null, jp, "Remoce User", JOptionPane.OK_CANCEL_OPTION);
//        if (action == JOptionPane.OK_OPTION) {
//            String selectedUser = (String) comboBox.getSelectedItem();
//            println(selectedUser);

        // remove user from the userlist
//            userXML.removeUser(selectedUser);
        // Update the combobox
//            setUsers(userXML);
        // Save the new list.
//            UsersXML.saveXML(new File(USER_XML_FILE), userXML);
        //          java.util.List<User> list = userXML.getList();
        //          list.remove(selectedUser);
        //          userComboBox.remove(comboBox.getSelectedIndex());
        //          userComboBox.revalidate();
//        }
        /*
        Map<String, String> map = User.users; Object[] options =
        map.entrySet().toArray(); java.util.List<String> list = new ArrayList<>();
        for (Object o : map.keySet()) { list.add((String) o); } final JComboBox
        userid = new JComboBox(list.toArray(new String[list.size()])); //final
        JPasswordField pwd = new JPasswordField(10); // pwd.addAncestorListener(new
            RequestFocusListener()); final JPanel panel = new JPanel(new GridLayout(2,
                2)); panel.add(new JLabel("User:")); panel.add(userid); // panel.add(new
            JLabel("Password:")); // panel.add(pwd); int action =
        JOptionPane.showConfirmDialog(null, panel, "Remove User",
            JOptionPane.OK_CANCEL_OPTION); if (action == JOptionPane.OK_OPTION) {
            String s = list.get(userid.getSelectedIndex());
            map.remove(options[userid.getSelectedIndex()]); User.setUsers(map);
            userComboBox.revalidate();
        }
         */
//        removeUserDialog.setVisible(true);
    }//GEN-LAST:event_miRemoveUserActionPerformed

    private void exploreMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exploreMenuItemActionPerformed
        String[] cmd = {"explorer", '"' + BASE_DIR + '"'};
        try {
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ex) {
            Logger.getLogger(InterfaceWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exploreMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        String content = String.format("EAX500 TESTING INTERFACE\n%s\n%s\nFirmata Version %s",
                REVISION,
                COMPILE_DATE,
                protocolVersion);
        SwingUtilities.invokeLater(() -> {
            ImageIcon i = getImageIcon("/Resources/toolbar.png");
            JOptionPane.showMessageDialog(InterfaceWindow.this, content, "About", JOptionPane.INFORMATION_MESSAGE, i);
            //InfoDialog.showMessageDialog(this, content, "About");
        });
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private static ImageIcon getImageIcon(String path) {
        return new javax.swing.ImageIcon(InterfaceWindow.class.getResource(path));
    }

    /**
     Creates an ImageIcon if the path is valid.

     @param path        resource path
     @param description description of the file
     @return The {@link ImageIcon}.
     */
    protected ImageIcon createImageIcon(String path, String description) {
        java.net.URL imageURL = Main.class.getResource("images/icon24.png");
        // java.net.URL imgURL = getClass().getResource(path);
        if (imageURL != null) {
            return new ImageIcon("icon32.png");
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed

        if (LOGOUT_TIMER.isRunning()) {
            LOGOUT_TIMER.restart();
        }

//        deviceTimoutTimer.restart();
//        //      if (arduino == null) {
//        //        JOptionPane.showMessageDialog(this, "Not connected to the tester!");
//        //        return;
//        //      }
//
//        if (RunTest.waiting.get()) {
//            RunTest.waiting.set(false);
//            return;
//        }
//        if (!RunTest.running.get()) {
//            testButton.setEnabled(false);
//            pgmButton.setEnabled(false);
//            loginButton.setEnabled(false);
//            //  RunTest rt = new RunTest(GUIFrame.this, arduino);
//            RunTest rt = new RunTest(GUIFrame.this,);
//            rt.start();
//        }
    }//GEN-LAST:event_testButtonActionPerformed

    private void pgmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pgmButtonActionPerformed
//        LOGOUT_TIMER.restart();
//        deviceTimoutTimer.restart();
//        String deviceSelection = deviceLabel.getText();
//
//        // Make sure a device has been selected and ensure only one instance is of the programming software is active.
//        if (!deviceSelection.contains("EAX5")) {
//            showErrorDialog("Device not selected");
//            return;
//        } else if (RunProgramming.isRunning()) {
//            showErrorDialog("Programming already active!");
//            return;
//        }
//
//        pgmButton.setEnabled(false);
//        testButton.setEnabled(false);
//        loginButton.setEnabled(false);
//        RunProgramming.run(deviceSelection);
    }//GEN-LAST:event_pgmButtonActionPerformed

    private void jDeviceListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDeviceListKeyPressed
        int keyCode = evt.getKeyCode();
        println(keyCode);
        if (keyCode == 10 || keyCode == 18 || keyCode == 32) {
            selectButton.doClick();
        }
    }//GEN-LAST:event_jDeviceListKeyPressed

    private void selectButtonsetDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonsetDeviceActionPerformed
        String name = jDeviceList.getSelectedValue();
        if (name == null) {
            return;
        }
        controlPane.setSelectedIndex(0);
        deviceLabel.setText(name);
        //        thisDevice = name;
        if (name.equalsIgnoreCase("EAX500")) {
            //Color c = new Color(-16728503);
            deviceLabel.setForeground(GREEN);
        } else {
            deviceLabel.setForeground(Color.RED);
        }
        String res = RESOURCE_DIRECTORY + "instructions.txt";
        println(res);
        if (res != null) {
            String inst = readFile(INSTRUCTIONS_FILE);
            inst = inst.replace("EAX-500 Testing Software", name);
            textArea.setText(inst);
        }
//        showInstructions();
//        debug("Selected device: " + thisDevice);
        pgmButton.requestFocusInWindow(); // Set focus to the program button now.
        LOGOUT_TIMER.restart();
//        deviceTimoutTimer.start();
    }//GEN-LAST:event_selectButtonsetDeviceActionPerformed

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged

        JSlider jSlider = (JSlider) evt.getSource();
        if (slider != null && slider.isVisible() && prefs != null) {
            int value = slider.getValue();
            prefs.putInt(SLIDER_PREF_KEY, slider.getValue());
            //  println(slider.getValue());
            slideLabel.setText(String.valueOf(value) + "%");
        }
    }//GEN-LAST:event_sliderStateChanged

    private void sliderEvent(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sliderEvent
        slider.setValueIsAdjusting(true);
//        slideLabel.setText(slider.getValue() + "%");
//        //prefs.putInt("SLIDER_VALUE", slider.getValue());
//        savePreference("SLIDER_VALUE", slider.getValue());
    }//GEN-LAST:event_sliderEvent

    private void sliderVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_sliderVetoableChange
//        JSlider js = (JSlider) evt.getSource();
//        savePreference("SLIDER_VALUE", js.getValue());
    }//GEN-LAST:event_sliderVetoableChange

    private void btnBackgroundColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackgroundColorActionPerformed
        Color c = JColorChooser.showDialog(this, "Select Background Color", textArea.getBackground());
        if (c != null) {
            textArea.setBackground(c);
            prefs.putInt(BKGD_PREF_KEY, c.getRGB());
        }
//        Color c = showAndGetColor("Choose Background Color", textArea.getBackground());
//        Color c = JColorChooser.showDialog(this, "Select New Color", Color.BLACK);
//        if (c != null) {
//            textArea.setBackground(c);
//            savePreference("BKGD_CLR", c.getRGB());
//        }
    }//GEN-LAST:event_btnBackgroundColorActionPerformed

    private void btnTextColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTextColorActionPerformed
        Color c = JColorChooser.showDialog(this, "Select Text Color", textArea.getForeground());
        if (c != null) {
            textArea.setForeground(c);
            prefs.putInt(FRGD_PREF_KEY, c.getRGB());
        }
//        Color c = showAndGetColor("Choose Text Color", Color.black);
//        if (c != null) {
//            textArea.setForeground(c);
//            savePreference("FRGD_CLR", c.getRGB());
//        }
    }//GEN-LAST:event_btnTextColorActionPerformed

    private void btnExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExit1ActionPerformed
        exitMenuItem.doClick();
    }//GEN-LAST:event_btnExit1ActionPerformed

    private void btnClearScreen1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearScreen1ActionPerformed
        textArea.setText("");
    }//GEN-LAST:event_btnClearScreen1ActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // See if a user is logged in
        if (userLabel.getText().contains("Not")) {
            // Perform a login
            //passwordDialog.setLocationRelativeTo(this);
            passwordField.addAncestorListener(new RequestFocusListener());
            centerDialog(passwordDialog);
            userComboBox.setEnabled(false);
            passwordDialog.setVisible(true);
        } else {
            // Perform a logout
            userComboBox.setEnabled(true);
            adminMenu.setEnabled(false);
            userLabel.setText("Not Logged In");
            userLabel.setForeground(Color.RED);
            loginButton.setText("Login");
            deviceLabel.setText("No Device Selected");
            deviceLabel.setForeground(Color.RED);
            pgmButton.setEnabled(false);
            testButton.setEnabled(false);
        }
        // Do a login
        //        if (thisUser == null) {
        //            // passwordDialog.setLocation(frame.getLocation().x + 250, (frame.getLocation().y) + 300);
        //            Helpers.centerDialog(passwordDialog);
        //            passwordField.addAncestorListener(new RequestFocusListener());
        //            passwordDialog.setVisible(true);
        //            LogControler.USER = thisUser;
        //            LOGGER.log(Level.INFO, "User Login Event: {0}", userComboBox.getSelectedItem());
        //            debug("User Login Event: " + userComboBox.getSelectedItem());
        //            jDeviceList.requestFocusInWindow();
        //            jDeviceList.setSelectedIndex(0);
        //            LOGOUT_TIMER.start();
        //        } else { // Logout
        //            LOGOUT_TIMER.stop();
        //            LOGGER.info("User Logout Event");
        //            debug("User Logout Event: " + thisUser);
        //            LogControler.USER = null;
        //            thisUser = null;
        //            userLabel.setText("Not Logged In");
        //            userLabel.setForeground(Color.RED);
        //            pgmButton.setEnabled(false);
        //            testButton.setEnabled(false);
        //            loginButton.setText("Login");
        //            adminMenu.setEnabled(false);
        //            thisDevice = null;
        //            deviceLabel.setText("No Device Selected");
        //            deviceLabel.setForeground(Color.RED);
        //            jDeviceList.requestFocusInWindow();
        //            jDeviceList.setSelectedIndex(0);
        //        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        Main.confirmExit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        okButton.doClick();
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        passwordDialog.setVisible(false);
        passwordField.setText("");
        if (userLabel.getText().contains("Not")) {
            userComboBox.setEnabled(true);
        } else {
            userComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        ActionEvent e = new ActionEvent(userComboBox, 0, new String(passwordField.getPassword()));
        actionListener.actionPerformed(e);
        jDeviceList.addAncestorListener(new RequestFocusListener());
    }//GEN-LAST:event_okButtonActionPerformed

    private void passwordDialogWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_passwordDialogWindowLostFocus
        println(evt);
        passwordField.setText("");
        /*    this.addWindowFocusListener(new WindowAdapter() {
            @Override
            public void windowGainedFocus(WindowEvent e) {
                jPanel7.requestFocusInWindow();
                jPanel7.addAncestorListener(new RequestFocusListener());
            }
        });*/
    }//GEN-LAST:event_passwordDialogWindowLostFocus

    private void newUserDialogFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newUserDialogFocusLost
        userTextField.setText("");
        passwordField1.setText("");
        adminCheckBox.setSelected(false);
        newUserDialog.setVisible(false);
    }//GEN-LAST:event_newUserDialogFocusLost

    private void jSplitPane2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSplitPane2PropertyChange
        if (evt.getPropertyName().equals("dividerLocation")) {
            double d = (double) jSplitPane2.getDividerLocation() / jSplitPane2.getSize().width;
            println(d);
            if (d < 0.25) {
                jSplitPane2.setDividerLocation(0.5);
            }
            //println(jSplitPane2.getDividerLocation());
//            println(jSplitPane2.getSize().width);
            // println(jSplitPane2.getDividerLocation() / jSplitPane2.getSize().width);
            prefs.putDouble(DIVIDER_LOCATION_PREF, d);
        }
    }//GEN-LAST:event_jSplitPane2PropertyChange

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        LOGOUT_TIMER.restart();
    }//GEN-LAST:event_formMouseMoved

    private void cancelBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn1ActionPerformed
        removeUserDialog.setVisible(false);
    }//GEN-LAST:event_cancelBtn1ActionPerformed

    private void miSetCOMPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSetCOMPortActionPerformed
        SwingWorker<String, String> sw = new SwingWorker<String, String>() {
            @Override
            protected String doInBackground() throws Exception {
                String[] ports = SerialPortList.getPortNames();
                //ComboBoxDialog.showMessageDialog(InterfaceWindow.this, "Select Port", "COM Ports");
                String selected = (String) JOptionPane.showInputDialog(InterfaceWindow.this, "Select Port", "Select COM Port", JOptionPane.OK_CANCEL_OPTION, null, ports, ports[0]);
                if (selected != null) {
                    prefs.put(COM_PORT_PREF_KEY, selected);
                }
                return selected;
            }
        };
        sw.run();
    }//GEN-LAST:event_miSetCOMPortActionPerformed

    private void miAutotestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAutotestActionPerformed
        JCheckBoxMenuItem mi = (JCheckBoxMenuItem) evt.getSource();
        boolean b = mi.isSelected();
        prefs.putBoolean(AUTOTEST_PREF, b);
    }//GEN-LAST:event_miAutotestActionPerformed

    private void miUsageVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUsageVideoActionPerformed
        String cmd = String.format("%c%s%c", '"', RESOURCE_DIRECTORY + "Videos\\BasicUsage.mp4", '"');
        PApplet.launch(cmd);
    }//GEN-LAST:event_miUsageVideoActionPerformed

    private void miPortErrorVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPortErrorVideoActionPerformed
        String cmd = String.format("%c%s%c", '"', RESOURCE_DIRECTORY + "Videos\\COMPortErrors.mp4", '"');
        PApplet.launch(cmd);
    }//GEN-LAST:event_miPortErrorVideoActionPerformed

    private void newUserDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_newUserDialogWindowClosing
        println(evt);
        userTextField.setText("");
        passwordField1.setText("");
        adminCheckBox.setSelected(false);
    }//GEN-LAST:event_newUserDialogWindowClosing

    private void userTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextFieldActionPerformed
        okBtn.doClick();
    }//GEN-LAST:event_userTextFieldActionPerformed

    private void passwordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordField1ActionPerformed
        okBtn.doClick();
    }//GEN-LAST:event_passwordField1ActionPerformed

    private void textAreaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaMouseMoved
        LOGOUT_TIMER.restart();
    }//GEN-LAST:event_textAreaMouseMoved

    private void jSplitPane2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSplitPane2MouseMoved
        LOGOUT_TIMER.restart();
    }//GEN-LAST:event_jSplitPane2MouseMoved

    private void controlPaneMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_controlPaneMouseMoved
        LOGOUT_TIMER.restart();
    }//GEN-LAST:event_controlPaneMouseMoved

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        newUserDialog.setVisible(false);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void removeUserDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_removeUserDialogWindowOpened
        //println(evt.getSource());
        println(evt);
        passwordField.setText("");
    }//GEN-LAST:event_removeUserDialogWindowOpened

    private void passwordDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_passwordDialogWindowClosed
        if (userLabel.getText().contains("Not")) {
            userComboBox.setEnabled(true);
        }
        jDeviceList.addAncestorListener(new RequestFocusListener());
        //jDeviceList.setFo
        passwordField.setText("");
    }//GEN-LAST:event_passwordDialogWindowClosed

    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyReleased
        int code = evt.getKeyCode();
        // Close the dialog window if the escape key is pressed. 
        if (code == 27) {
            passwordDialog.setVisible(false);

        }
    }//GEN-LAST:event_passwordFieldKeyReleased

    private void passwordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusLost
        // Re-enable the usercombobox
        if (userLabel.getText().contains("Not")) {
            userComboBox.setEnabled(true);
            rightPanel.addAncestorListener(new RequestFocusListener());
            userComboBox.addAncestorListener(new RequestFocusListener());
        }
    }//GEN-LAST:event_passwordFieldFocusLost

    private void userComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userComboBoxKeyPressed
        int code = evt.getKeyCode();
        // Click the login button if the space bar or enter key is pressed
        if (code == 10 || code == 32) {
            loginButton.doClick();
        }
    }//GEN-LAST:event_userComboBoxKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        println(evt);
        jSplitPane2.setDividerLocation(prefs.getInt(DIVIDER_LOCATION_PREF, 400));
    }//GEN-LAST:event_formWindowOpened

    /**
     @param args the command line arguments
     */
    public static void main(String args[]) {
        setLookAndFeel();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new InterfaceWindow().setVisible(true);
        });
    }

    public static void setLookAndFeel() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        UIManager.put("TitledBorder.font", 5f);
    }

    /**
     Returns an ImageIcon, or null if the path was invalid.
     */
    private static ImageIcon createImageIcon(String path, Class clazz) {
        URL imgURL = clazz.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     Centers the frame

     @param frame
     */
    public static void centerFrame(JFrame frame) {
        try {
            Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
            int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
            int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
            frame.setLocation(x, y);
        } catch (HeadlessException e) {
        }
    }

    public static void centerDialog(JDialog frame) {
        try {
            Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
            int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
            int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2) - 15;
            frame.setLocation(x, y);
        } catch (HeadlessException e) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JMenuItem aboutMenuItem;
    public javax.swing.JCheckBox adminCheckBox;
    javax.swing.JMenu adminMenu;
    javax.swing.JButton btnBackgroundColor;
    javax.swing.JButton btnClearScreen1;
    javax.swing.JButton btnExit1;
    javax.swing.JButton btnTextColor;
    public javax.swing.JButton cancelBtn;
    public javax.swing.JButton cancelBtn1;
    javax.swing.JButton cancelButton;
    javax.swing.JMenuItem changeFontMenuItem;
    public javax.swing.JLabel comErrorLabel;
    javax.swing.JMenuItem connectMenuItem;
    javax.swing.JTabbedPane controlPane;
    public javax.swing.JLabel deviceLabel;
    javax.swing.JMenuItem eax300menuItem;
    javax.swing.JMenuItem exitMenuItem;
    javax.swing.JMenuItem exploreMenuItem;
    javax.swing.JComboBox<String> jComboBox1;
    javax.swing.JDesktopPane jDesktopPane1;
    public javax.swing.JList<String> jDeviceList;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel7;
    javax.swing.JMenu jMenu1;
    javax.swing.JMenu jMenu2;
    javax.swing.JMenu jMenu3;
    javax.swing.JMenuBar jMenuBar1;
    javax.swing.JOptionPane jOptionPane1;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel10;
    javax.swing.JPanel jPanel11;
    javax.swing.JPanel jPanel6;
    javax.swing.JPanel jPanel7;
    javax.swing.JPanel jPanel8;
    javax.swing.JPanel jPanel9;
    javax.swing.JScrollPane jScrollPane;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JPopupMenu.Separator jSeparator1;
    javax.swing.JPopupMenu.Separator jSeparator3;
    javax.swing.JPopupMenu.Separator jSeparator4;
    javax.swing.JPopupMenu.Separator jSeparator5;
    public javax.swing.JSplitPane jSplitPane2;
    javax.swing.JPanel leftPanel;
    public javax.swing.JButton loginButton;
    public javax.swing.JMenuItem miAddUser;
    public javax.swing.JCheckBoxMenuItem miAutotest;
    public javax.swing.JMenuItem miEditConfig;
    public javax.swing.JMenuItem miManualControl;
    javax.swing.JMenuItem miPortErrorVideo;
    public javax.swing.JMenuItem miRemoveUser;
    public javax.swing.JMenuItem miSetCOMPort;
    javax.swing.JMenuItem miUsageVideo;
    public final javax.swing.JDialog newUserDialog = new javax.swing.JDialog();
    public javax.swing.JButton okBtn;
    javax.swing.JButton okButton;
    public javax.swing.JDialog passwordDialog;
    javax.swing.JPasswordField passwordField;
    public javax.swing.JPasswordField passwordField1;
    public javax.swing.JButton pgmButton;
    javax.swing.JDialog removeUserDialog;
    public javax.swing.JButton removeUserOKBtn;
    javax.swing.JPanel rightPanel;
    javax.swing.JButton selectButton;
    public javax.swing.JLabel slideLabel;
    public javax.swing.JSlider slider;
    public javax.swing.JButton testButton;
    javax.swing.JTextArea textArea;
    public javax.swing.JComboBox<String> userComboBox;
    public javax.swing.JLabel userLabel;
    public javax.swing.JTextField userTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
